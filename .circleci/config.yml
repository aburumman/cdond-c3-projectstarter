version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
           


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/W43NzaenQoXBdDhVKL2KBR/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            else
              echo "zero migration"
            #  Add revert code here. You can find this in the Getting Started section.
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end dependencies
          command: |
            cd backend
            npm install
            #npm audit fix
            #npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical 
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: | 
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run build

                
            
  install_tar_gzip:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
                name: install tar and gzip
                command: yum install tar gzip
  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
          no_output_timeout: 30m

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend${CIRCLE_WORKFLOW:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:project,Values=udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ~/project/.circleci/ansible/inventory.txt
          #command: |
          #  backend_instance_ip=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --output=json | jq -r '.Reservations[0].Instances[].NetworkInterfaces[].Association.PublicIp')
          # echo $backend_instance_ip >> project/.circleci/ansible/inventory.txt
            # Your code here
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
              #- destroy-environment:
        #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
          #at: ~/project/.circleci/ansible/inventory.txt
      - add_ssh_keys:
          fingerprints: ["ba:0b:b0:54:65:e2:80:dc:37:33:75:5f:f4:f4:65:ed"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install tar, gzip, aws-cli
          command: |
            apk add --update tar gzip
            pip install awscli
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: run deployment
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
  deploy-frontend:
    docker: 
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm zip
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:project,Values=udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build and Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            echo aws --version
      - run: 
          name: Run Migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: send migration info to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/W43NzaenQoXBdDhVKL2KBR/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "migration complete -------"
            else
              echo "no migration happened"
            fi
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Install dependencies
          command: echo "Hello " #|
            # Your code here
            #exit 1
      - run:
          name: Configure server
          command: echo "Hello " #|
            # Your code here

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:0b:b0:54:65:e2:80:dc:37:33:75:5f:f4:f4:65:ed"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version

      - run:
          name: Package, Deploy Backend and configure prometheus service discovery
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "contents of the inventory.txt file is ------$(tail -i inventory.txt)"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Smoke Test frontend app
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
                return 0 
            else
                return 1
            fi
  smoke-test-2:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout:    
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
             export BACKEND_IP=$(aws ec2 describe-instances \
             --filters "Name=tag:project,Values=udapeople" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
             #--filters "Name=tag:project,Values=udapeople" \
             #--filters "Name=instance-state-name,Values=running" \
             export API_URL="http://${BACKEND_IP}:3030"
             echo  API URL IS "${API_URL}" --- END
             if curl "${API_URL}/api/status" | grep "ok"
             then
                 return 0
             else
                 return 1
             fi


      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  list-stack:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - run:
          name: list my stacks
          command: aws cloudformation list-stacks
  delete-vms:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - run: 
          name: list stack set 
          command: aws cloudformation list-stacks
      - run: 
          name: delete vms
          command: |
            aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query "Reservations[*].Instances[*].InstanceId" --output text
            aws ec2 terminate-instances --instance-ids i-0f764061ddf37e21d
  cloudfront-update:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: save old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "old workflow ID is: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/W43NzaenQoXBdDhVKL2KBR/OLD_WORKFLOW_ID -d "${OLD_WORKFLOW_ID}"           
      - run:
          name: Update Cloudfront 
          command:  |
             aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name InitialStack \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople
                
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
cleanup:
    docker:
      # Docker image here
      - image: cicrcle/node:alpine
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - scan-frontend
      - scan-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      #- delete-vms
      - cloudfront-update:
          requires: [smoke-test]
